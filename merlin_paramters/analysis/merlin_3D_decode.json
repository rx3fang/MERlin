{
    "analysis_tasks": [
		{
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign"
        },
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp",
            "parameters": {
                "highpass_sigma": 10,
                "write_fiducial_images": false,
				"ref_index": 23
            }
        },
	{
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "analysis_name": "mosaic",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp",
                "data_channels": ["dapi", "polyT"],
                "draw_fov_labels": false,
                "microns_per_pixel": 1,
				"z_index": 50
            }
    	},
	{
            "task": "GenerateMosaic",
            "module": "merlin.analysis.generatemosaic",
            "analysis_name": "mosaic_fov",
            "parameters": {
                "global_align_task": "SimpleGlobalAlignment",
                "warp_task": "FiducialCorrelationWarp",
                "data_channels": ["dapi", "polyT"],
                "draw_fov_labels": true,
                "microns_per_pixel": 1,
				"z_index": 50
            }
    	},
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp",
                "highpass_sigma": 3,
                "save_pixel_histogram": false,
				"decon_sigma": 2,
                "decon_iterations": 10,
                "decon_filter_size": 9
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize1",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
                "optimize_chromatic_correction" : false,
				"write_decoded_images": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize2",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
		        "crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
                "previous_iteration": "Optimize1",
                "optimize_chromatic_correction": false,
                "write_decoded_images": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize3",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
		        "crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
                "previous_iteration": "Optimize2",
                "optimize_chromatic_correction": false,
                "write_decoded_images": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize4",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize3",
                "optimize_chromatic_correction": false,
				"write_decoded_images": true
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize5",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize4",
                "optimize_chromatic_correction": false,
				"write_decoded_images": false
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize6",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize5",
                "optimize_chromatic_correction": false,
				"write_decoded_images": false
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize7",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize6",
                "optimize_chromatic_correction": false,
				"write_decoded_images": false
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize8",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize7",
                "optimize_chromatic_correction": false,
				"write_decoded_images": false
            }
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize9",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize8",
                "optimize_chromatic_correction": false,
				"write_decoded_images": false
            	}
        },
        {
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize10",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 4,
                "fov_per_iteration": 50,
				"crop_width" : 102,
                "distance_threshold" : 0.65,
                "low_pass_sigma" : 1.5,
				"previous_iteration": "Optimize9",
                "optimize_chromatic_correction": false,
				"write_decoded_images": true
				}
	},
	{
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize10",
                "global_align_task": "SimpleGlobalAlignment",
				"remove_z_duplicated_barcodes": false,
				"minimum_area": 2,
                "lowpass_sigma": 1.5,
                "crop_width": 70,
                "distance_threshold":0.65,
                "write_decoded_images": false
				}
	},
	{
		  "task": "GenerateAdaptiveThreshold",
		  "module": "merlin.analysis.filterbarcodes",
		  "parameters": {
		      "decode_task": "Decode",
		      "run_after_task": "Decode"
			  }
	},
	{
		"task": "AdaptiveFilterBarcodes",
		"module": "merlin.analysis.filterbarcodes",
		"parameters": {
			"misidentification_rate": 0.05,
			"decode_task": "Decode",
			"adaptive_task": "GenerateAdaptiveThreshold"
			}
	},
    {
        "task": "CellPoseSegment3D",
        "module": "merlin.analysis.segment",
        "analysis_name": "CellPoseSegment3D",
        "parameters": {
			"warp_task": "FiducialCorrelationWarp",
			"global_align_task": "SimpleGlobalAlignment",
			"model_path": "/home/r3fang/Github/MERlin/merlin_paramters/cellpose_models/CP_20221125__disk_xy05um_z1um_DAPI_polyT",
			"channel_names": ["DAPI", "polyT"],
			"channels": [2,1],
			"write_mask_images": false,
			"resample": true,
			"use_gpu": false,
			"pixel_in_micron": 0.5,
			"diameter": 25
        }
    },
    {
        "task": "ExportCellMetadata",
        "module": "merlin.analysis.segment",
        "analysis_name": "ExportCellMetadata3D",
        "parameters": {
            "segment_task": "CellPoseSegment3D"
        }
    },
    {
        "task": "ExportCellBoundaries",
        "module": "merlin.analysis.segment",
        "analysis_name": "ExportCellBoundaries3D",
        "parameters": {
            "segment_task": "CellPoseSegment3D"
        }
    },
    {
        "task": "RemoveOverlapBarcodes",
        "module": "merlin.analysis.filterbarcodes",
        "analysis_name": "RemoveOverlapBarcodes",
        "parameters": {
		 "distance_offcut": 1.3,
		 "decode_task": "Decode",
		 "filter_task": "AdaptiveFilterBarcodes"
		 }
    },
	{
		"task": "ExportBarcodes",
		"module": "merlin.analysis.exportbarcodes",
		"parameters": {
			"filter_task": "RemoveOverlapBarcodes",
		    "columns": ["barcode_id", "global_x", "global_y", "global_z",
		        "x", "y", "fov", "area", "mean_intensity",
				"max_intensity", "mean_distance", "min_distance"],
		    	"exclude_blanks": false
		}
	},
    {
        "task": "PartitionBarcodes",
        "module": "merlin.analysis.partition",
        "analysis_name": "PartitionBarcodes",
        "parameters": {
            "filter_task": "RemoveOverlapBarcodes",
            "assignment_task": "CellPoseSegment3D",
            "alignment_task": "SimpleGlobalAlignment"
        }
    },
    {
        "task": "ExportPartitionedBarcodes",
        "module": "merlin.analysis.partition",
        "analysis_name": "ExportPartitionedBarcodes",
        "parameters": {
            "partition_task": "PartitionBarcodes"
        }
    },
     {
         "task": "SlurmReport",
         "module": "merlin.analysis.slurmreport",
         "analysis_name": "SlurmReport",
         "parameters": {
             "run_after_task": "ExportPartitionedBarcodes"
         }
     }
    ]
}
